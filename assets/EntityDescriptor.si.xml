<!-- 
/** 
 * [SIMINOV FRAMEWORK]
 * Copyright [2015] [Siminov Software Solution LLP|support@siminov.com]
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 **/

-->


<!-- Design Of EntityDescriptor.si.xml -->

<entity-descriptor>

    <!-- General Properties Of Table And Class -->
    
    	<!-- Mandatory Field -->
    		<!-- NAME OF TABLE -->
    <property name="table_name">name_of_table</property>
    
    	<!-- Mandatory Field -->
    		<!-- MAPPED CLASS NAME -->
    <property name="class_name">mapped_class_name/mapped_javascript_class_name</property>
    
    
    	<!-- Optional Field -->
    <attributes>
        
	    <!-- Column Properties Required Under This Table -->
	    
			<!-- Optional Field -->
		<attribute>
		    
			    <!-- Mandatory Field -->
					<!-- COLUMN_NAME: Mandatory Field -->
   		    <property name="column_name">column_name_of_table</property>
		    			
    		    <!-- Mandatory Field -->
					<!-- VARIABLE_NAME: Mandatory Field -->
		    <property name="variable_name">class_variable_name</property>
		    		    
			    <!-- Mandatory Field -->
			<property name="type">variable_data_type</property>
			
				<!-- Optional Field (Default is false) -->
			<property name="primary_key">true/false</property>
			
				<!-- Optional Field (Default is false) -->
			<property name="not_null">true/false</property>
			
				<!-- Optional Field (Default is false) -->
			<property name="unique">true/false</property>
			
				<!-- Optional Field -->
			<property name="check">condition_to_be_checked (Eg: variable_name 'condition' value; variable_name > 0)</property>
			
				<!-- Optional Field -->
			<property name="default">default_value_of_column (Eg: 0.1)</property>
		
		</attribute>		

    </attributes>
		
		
		<!-- Optional Field -->
    <indexes>
        
		<!-- Index Properties -->
		<index>
		    
			    <!-- Mandatory Field -->
			    	<!-- NAME OF INDEX -->
		    <property name="name">name_of_index</property>
		    
			    <!-- Mandatory Field -->
					<!-- UNIQUE: Optional Field (Default is false) -->
		    <property name="unique">true/false</property>
		    
		    	<!-- Optional Field -->
		    		<!-- Name of the column -->
		    <property name="column">column_name_needs_to_add</property>
		    
		</index>
        
    </indexes>
    
		
	<!-- Map Relationship Properties -->
				
		<!-- Optional Field's -->	
	<relationships>
		    
	    <relationship>
	        
	        	<!-- Mandatory Field -->
	        		<!-- Type of Relationship -->
	        <property name="type">one-to-one|one-to-many|many-to-one|many-to-many</property>
	        
	        	<!-- Mandatory Field -->
	        		<!-- REFER -->
	        <property name="refer">class_variable_name</property>
	        
	        	<!-- Mandatory Field -->
	        		<!-- REFER TO -->
	        <property name="refer_to">mapped_class_name/mapped_javascript_class_name</property>
	            
	        	<!-- Optional Field -->
	        <property name="on_update">cascade/restrict/no_action/set_null/set_default</property>    
	            
	        	<!-- Optional Field -->    
	        <property name="on_delete">cascade/restrict/no_action/set_null/set_default</property>    
	            
				<!-- Optional Field (Default is false) -->
	       	<property name="load">true/false</property>	            
	        
	    </relationship>
	    
	</relationships>

</entity-descriptor>


<!-- 

DatabaseMapping.si.xml is the one who does the ORM (Object Relationship Modelling).

	i. ENITYT TAG: This tag defines the relationship between database table and its mapped mapped class name.
	
		-> table_name*: Name of table. It is mandatory field. 
		
		-> class_name*: Name of mapped class name which is to be mapped to table name. It is mandatory field.

			Note*: 
				-> Mapped class can be define in both Native and Hybrid.
				
				-> Native Class: If you have mapped class is in Native then use Java to define class. 
						Specify full native class path and name in class_name TAG.
				
				-> Hybrid Class: If you have mapped class is in Hybrid then use JavaScript to define class. 
						Specify only JavaScript Function name in class_name TAG.
				
				-> Both (Native/Hybrid) Class: If you have mapped class is in both Native and Hybrid then both Native and JavaScript to define classes.		
						Specify full native class path and name in class_name TAG, no need to define for JavaScript because Siminov will automatically accume same name for it.
		
		
	ii. ATTRIBUTE TAG: This tag defines the relationship between database table column and its mapped class variable name.
	
		-> column_name*: Name of database table column name which it defines.
		
		-> variable_name*: Name of mapped class variable name.
		
		
		PROPERTIES OF COLUMN TAG
		
			-> type*: Variable data type. It is mandatory field.
		
					Note*: 
						-> Mapped Class can be define in both Native and Hybrid.
						
						-> Native Class: If you have mapped class in Native then specify Variable data type.
							
						-> Hybrid Class: If you have mapped POJO class in Hybrid then specify JavaScript Variable data type.
						
							Data Types*:
								-> string
								-> primitive-integer | integer
								-> primitive-long | long
								-> primitive-float | float
								-> primitive-double | double
								-> primitive-boolean | boolean
								-> primitive-byte | byte
				
						-> Native and Hybrid Class: If your mapped native class is in both Native and Hybrid then only specify Java Variable data type, for JavaScript Siminov will take care.

			
			-> primary_key: TRUE/FALSE. It defines whether the field is primary key to table or not. It is optional field. Default value is false.
			
			-> not_null: TRUE/FALSE. It defines whether the field can be empty or not. It is optional field. Default value is false.
			
			-> unique: TRUE/FALSE. It defines whether the field should be unique or not. It is optional field. Default value is false.
			
			-> default: It define the default value of that column in table. It is optional field.
			
			-> check: It define the condition needs to be satisfied for column value. It is optinal field.
		
		
		
	iii. INDEX TAG: This tag defines the index's needed by table.
	
		-> name*: Name of the index.
		
		-> unique: TRUE/FALSE. It defines whether index needs to be unique or not. (A unique index guarantees that the index key contains no duplicate values and therefore every row in the table is in some way unique.)
				Default value is false.
				
		COLUMN'S TAG
			
			-> column: Name of column's included in index.
			
		
			
	iv. RELATIONSHIPS TAG: It defines relationship between object.
			- Relationship can be of four types:
			
			1. ONE-TO-ONE: <one-to-one> In a one-to-one relationship, each row in one database table is linked to 1 and only 1 other row in another table. 
					Example:
						Relationship between Table A and Table B, each row in Table A is linked to another row in Table B. 
						The number of rows in Table A must equal the number of rows in Table B.
					
			
			2. ONE-TO-MANY: <one-to-many> In a one-to-many relationship, each row in the related to table can be related to many rows in the relating table. 
					This effectively save storage as the related record does not need to be stored multiple times in the relating table.
					
					Example:
						All the customers belonging to a business is stored in a customer table while all the customer invoices are stored in an invoice table. 
						Each customer can have many invoices but each invoice can only be generated for a single customer.	
			
			
			3. MANY-TO-ONE: <many-to-one> In a many-to-one relationship one entity (typically a column or set of columns) contains values that refer to another entity 
					(a column or set of columns) that has unique values.
			
					Example:
						In a geography schema having tables Region, State, and City, there are many states that are in a given region, but no states are in two regions.
					
			
			4. MANY-TO-MANY: <many-to-many> In a many-to-many relationship, one or more rows in a table can be related to 0, 1 or many rows in another table. 
					A mapping table is required in order to implement such a relationship.
	
					Example:
						All the customers belonging to a bank is stored in a customer table while all the bank's products are stored in a product table. 
						Each customer can have many products and each product can be assigned to many customers.
						
	
			-> refer*: Name of variable which needs to be mapped. It is mandatory field.
			
			-> refer_to*: Class name of mapped variable. It is mandatory field.
			
					Note*: 
						-> Class can be define in both Native and Hybrid.
						
						-> Native Class: If you have mapped class in Native then specify native class path and name in refer_to TAG.
						
						-> Hybrid Class: If you have mapped class in Hybrid then specify only JavaScript Function name in refer_to TAG.
						
						-> Both (Native/Hybrid) Class: If you have mapped class in both Native and Hybrid then specify full Java class path and name in refer_to TAG, no need to define for JavaScript because Siminov will automatically accume same name for it.
			
			-> on_update: cascade/restrict/no_action/set_null/set_default. It defines action needs to be done, when update occur.
		
			-> on_delete: cascade/restrict/no_action/set_null/set_default. It defines action needs to be done, when delete occur.

			-> load: TRUE/FALSE, It defines whether it need to be load or not.
						
-->
